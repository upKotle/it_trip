import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown as md
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = '7810891694:AAFQWbhhUd28qQa7Iutt5-k5oOewOnzUz88'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WasteCalculation(StatesGroup):
    waiting_for_waste_class = State()
    waiting_for_waste_amount = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –§–ì–ò–° –û–ü–í–ö")],
            [types.KeyboardButton(text="üí≥ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")],
            [types.KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏")],
            [types.KeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")],
            [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –§–ì–ò–° –û–ü–í–ö. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(lambda message: message.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –§–ì–ò–° –û–ü–í–ö")
async def registration_guide(message: types.Message):
    guide_text = md.text(
        md.bold("üìå –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"),
        md.text("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞", md.hlink("–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –§–ì–ò–° –û–ü–í–ö", "https://qisopvk.ru")),
        "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ò–ù–ù, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ).",
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å.",
        "4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
        md.text("\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:", md.hlink("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è PDF",
                                         "https://gisopvk.ru/media/files/filepublic/d/a/a/daa6eeceb30a1625.%D0%BA%D0%B0%D0%BA-%D0%BF%D1%80%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D1%82%D1%8C-%D0%BF%D1%80%D0%B0%D0%B2%D0%B0-%D0%B4%D0%BE%D1%81%D1%82%D1%83%D0%BF%D0%B0-%D1%81%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D0%BA%D1%83.pdf")),
        sep="\n\n"
    )
    await message.answer(guide_text, parse_mode=ParseMode.HTML, reply_markup=main_menu_keyboard())


@dp.message(lambda message: message.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏")
async def digital_signature_guide(message: types.Message):
    guide_text = md.text(
        md.bold("üîê –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å (–≠–ü):"),
        "1. –ü–æ–ª—É—á–∏—Ç–µ –≠–ü –≤ –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω–æ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–º —Ü–µ–Ω—Ç—Ä–µ.",
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ü–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≠–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ö—Ä–∏–ø—Ç–æ–ü—Ä–æ).",
        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≠–ü.",
        md.text("\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ:", md.hlink("–ü–∞–º—è—Ç–∫–∞ –ø–æ –≠–ü",
                                         "https://gisopvk.ru/media/files/filepublic/8/d/8/8d8c960b707c8b38.%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%BA%D0%B0-%D1%8D%D0%BF_1.pdf")),
        sep="\n\n"
    )
    await message.answer(guide_text, parse_mode=ParseMode.HTML, reply_markup=main_menu_keyboard())


# –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
@dp.message(lambda message: message.text == "üí≥ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")
async def start_calculation(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="I –∫–ª–∞—Å—Å")],
            [types.KeyboardButton(text="II –∫–ª–∞—Å—Å")],
            [types.KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ—Ç—Ö–æ–¥–æ–≤:", reply_markup=keyboard)
    await state.set_state(WasteCalculation.waiting_for_waste_class)


@dp.message(WasteCalculation.waiting_for_waste_class)
async def choose_waste_class(message: types.Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_main_menu(message, state)
        return

    if message.text not in ["I –∫–ª–∞—Å—Å", "II –∫–ª–∞—Å—Å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=main_menu_keyboard())
        return

    await state.update_data(waste_class=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –æ—Ç—Ö–æ–¥–æ–≤ (–≤ —Ç–æ–Ω–Ω–∞—Ö):", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(WasteCalculation.waiting_for_waste_amount)


@dp.message(WasteCalculation.waiting_for_waste_amount)
async def calculate_cost(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5.2).", reply_markup=main_menu_keyboard())
        return

    data = await state.get_data()
    waste_class = data['waste_class']

    rates = {
        "I –∫–ª–∞—Å—Å": 222907.36,
        "II –∫–ª–∞—Å—Å": 62468.26
    }
    cost = rates[waste_class] * amount
    await message.answer(
        md.text(
            md.bold("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:"),
            md.text(f"‚Ä¢ –ö–ª–∞—Å—Å –æ—Ç—Ö–æ–¥–æ–≤: {waste_class}"),
            md.text(f"‚Ä¢ –û–±—ä–µ–º: {amount} —Ç–æ–Ω–Ω"),
            md.text(f"‚Ä¢ –ò—Ç–æ–≥–æ: {cost:,.2f} —Ä—É–±. (–±–µ–∑ –ù–î–°)"),
            sep="\n\n"
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=main_menu_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
    )
    await state.clear()

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
async def show_help(message: types.Message):
    help_text = md.text(
        md.bold("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:"),
        md.text("–Ø –ø–æ–º–æ–≥–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –§–ì–ò–° –û–ü–í–ö. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:"),
        md.text("‚Ä¢ üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ ‚Äî –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        md.text("‚Ä¢ üí≥ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Ö–æ–¥–æ–≤ I/II –∫–ª–∞—Å—Å–∞"),
        md.text("‚Ä¢ üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏ ‚Äî —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ"),
        md.text("\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é."),
        sep="\n\n"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML, reply_markup=main_menu_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())