import os
import logging
from typing import Optional
from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.utils.markdown import html_decoration as hd

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF
from langchain_community.document_loaders import PyPDFLoader
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "7810891694:AAFQWbhhUd28qQa7Iutt5-k5oOewOnzUz88"
GIGACHAT_CREDENTIALS = "MTlmNjg5ZTYtNzRhNS00NzFjLTg4NzEtM2I2OThmNDdkNTk4OmY3OWJkODU0LTRiMGUtNDg3ZC1iMzEzLTNlODc4ZjYxNGRmZQ=="  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ç–æ–∫–µ–Ω)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
gigachat = GigaChat(credentials=GIGACHAT_CREDENTIALS, verify_ssl_certs=False)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WasteCalculation(StatesGroup):
    waiting_for_waste_class = State()
    waiting_for_waste_amount = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
def load_documents():
    pdf_paths = [
        "data/registration_guide.pdf",
        "data/tariffs.pdf",
        "data/digital_signature_manual.pdf"
    ]

    docs = []
    for path in pdf_paths:
        try:
            loader = PyPDFLoader(path)
            docs.extend(loader.load())
        except Exception as e:
            logger.error(f"Failed to load {path}: {e}")

    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=200
    )
    return text_splitter.split_documents(docs)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
try:
    documents = load_documents()
    embeddings = HuggingFaceEmbeddings(
        model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
    )
    vector_db = FAISS.from_documents(documents, embeddings)
except Exception as e:
    logger.error(f"Vector DB initialization failed: {e}")
    raise


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –§–ì–ò–° –û–ü–í–ö")],
            [types.KeyboardButton(text="üí≥ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")],
            [types.KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏")],
            [types.KeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")]
        ],
        resize_keyboard=True
    )


async def ask_gigachat(question: str, context: str) -> Optional[str]:
    try:
        messages = Messages(
            role=MessagesRole.USER,
            content=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {question}\n\n–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —Å–∫–∞–∂–∏ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'."
        )

        response = gigachat.chat(
            Chat(
                messages=[messages],
                temperature=0.3,
                max_tokens=1000
            )
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"GigaChat API error: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –§–ì–ò–° –û–ü–í–ö.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n"
        "- –ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ —Å–∏—Å—Ç–µ–º–µ —Ç–µ–∫—Å—Ç–æ–º",
        reply_markup=main_menu_keyboard()
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—Å—Ç–æ–º - —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "- –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ?\n"
        "- –ö–∞–∫–∏–µ –Ω—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã?\n"
        "- –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è 5 —Ç–æ–Ω–Ω –æ—Ç—Ö–æ–¥–æ–≤ II –∫–ª–∞—Å—Å–∞?",
        reply_markup=main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@dp.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –§–ì–ò–° –û–ü–í–ö")
async def registration_guide(message: types.Message):
    await message.answer(
        "üìÑ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –§–ì–ò–° –û–ü–í–ö</b>\n\n"
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:\n"
        "1. –î–µ–π—Å—Ç–≤—É—é—â–∏–π –ò–ù–ù\n"
        "2. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å\n"
        "3. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /help",
        reply_markup=main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


@dp.message(F.text == "üí≥ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏")
async def start_calculation(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ—Ç—Ö–æ–¥–æ–≤:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="I –∫–ª–∞—Å—Å")],
                [types.KeyboardButton(text="II –∫–ª–∞—Å—Å")],
                [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(WasteCalculation.waiting_for_waste_class)


@dp.message(F.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏")
async def digital_signature_guide(message: types.Message):
    await message.answer(
        "üîê <b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –§–ì–ò–° –û–ü–í–ö</b>\n\n"
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "1. –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≠–ü\n"
        "2. –°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ—Å–∏—Ç–µ–ª—å (–†—É—Ç–æ–∫–µ–Ω, JaCarta)\n"
        "3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ü–û –ö—Ä–∏–ø—Ç–æ–ü—Ä–æ CSP\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± –≠–ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
        reply_markup=main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
@dp.message(WasteCalculation.waiting_for_waste_class)
async def choose_waste_class(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        return

    if message.text not in ["I –∫–ª–∞—Å—Å", "II –∫–ª–∞—Å—Å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    await state.update_data(waste_class=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –æ—Ç—Ö–æ–¥–æ–≤ (–≤ —Ç–æ–Ω–Ω–∞—Ö):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(WasteCalculation.waiting_for_waste_amount)


@dp.message(WasteCalculation.waiting_for_waste_amount)
async def calculate_cost(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.2).")
        return

    data = await state.get_data()
    waste_class = data['waste_class']
    rates = {"I –∫–ª–∞—Å—Å": 222907.36, "II –∫–ª–∞—Å—Å": 62468.26}
    cost = rates[waste_class] * amount

    await message.answer(
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:</b>\n\n"
        f"‚Ä¢ –ö–ª–∞—Å—Å –æ—Ç—Ö–æ–¥–æ–≤: {waste_class}\n"
        f"‚Ä¢ –û–±—ä–µ–º: {amount} —Ç–æ–Ω–Ω\n"
        f"‚Ä¢ –ò—Ç–æ–≥–æ: {cost:,.2f} —Ä—É–±. (–±–µ–∑ –ù–î–°)\n\n"
        f"<i>–†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º —Ç–∞—Ä–∏—Ñ–∞–º –§–ì–ò–° –û–ü–í–ö</i>",
        reply_markup=main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å GigaChat
@dp.message(F.text)
async def handle_text_query(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
    current_state = await state.get_state()
    if current_state:
        return

    query = message.text.strip()
    if not query or len(query) > 500:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    try:
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.send_chat_action(message.chat.id, "typing")

        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ PDF
        docs = vector_db.similarity_search(query, k=3)
        context = "\n\n---\n\n".join([d.page_content for d in docs])

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ GigaChat
        answer = await ask_gigachat(
            question=query,
            context=f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –§–ì–ò–° –û–ü–í–ö:\n{context}"
        )

        if not answer:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat API")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = (
            f"üìÑ <b>–û—Ç–≤–µ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n\n"
            f"{answer}\n\n"
            f"<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –§–ì–ò–° –û–ü–í–ö</i>"
        )

    except Exception as e:
        logger.error(f"Error processing query: {e}")
        response = (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "1. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n"
            "3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ"
        )

    await message.answer(
        response,
        reply_markup=main_menu_keyboard(),
        parse_mode=ParseMode.HTML
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())